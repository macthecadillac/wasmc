Tables are composed of elements


  tables = [Table (TableType (Limit 18 Nothing) FuncRef)], 
  elems  = [ElemSegment {tableIndex = 0, offset = [I32Const 0], funcIndexes = [1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1]}], 

elem     ::= {𝗍𝗒𝗉𝖾 reftype,𝗂𝗇𝗂𝗍 vec(expr),𝗆𝗈𝖽𝖾 elemmode}
elemmode ::= passive  -- A passive element segment’s elements can be copied 
                           to a table using the table.init instruction.
             active {table tableidx, offset expr}  
                         An active element segment copies its elements 
                         into a table during instantiation, as specified by a 
                         table index and a constant expression defining an offset into that table
wtf is       declarative -- A declarative element segment is not available at runtime but merely 
this one                    serves to forward-declare references that are formed in code with instructions like 𝗋𝖾𝖿.𝖿𝗎𝗇𝖼

so in the code, if we see `call_indirect` it is "popping off stack" and calling that function in the table